---
const { videoId = "CaBRzKmPOpA" } = Astro.props
---

<div class="video-background">
  <div id="youtube-player" class="video-player"></div>
  <div class="video-overlay"></div>
</div>

<script define:vars={{ videoId }}>
  // Load YouTube IFrame API
  var tag = document.createElement('script');
  tag.src = "https://www.youtube.com/iframe_api";
  var firstScriptTag = document.getElementsByTagName('script')[0];
  firstScriptTag.parentNode.insertBefore(tag, firstScriptTag);

  var player;
  
  // YouTube API ready callback
  window.onYouTubeIframeAPIReady = function() {
    player = new YT.Player('youtube-player', {
      videoId: videoId,
      playerVars: {
        autoplay: 1,
        controls: 0,
        showinfo: 0,
        modestbranding: 1,
        loop: 1,
        fs: 0,
        cc_load_policy: 0,
        iv_load_policy: 3,
        autohide: 0,
        mute: 1,
        playlist: videoId, // Required for loop
        playsinline: 1,
        rel: 0,
      },
      events: {
        onReady: function(event) {
          event.target.mute();
          event.target.playVideo();
        },
        onStateChange: function(event) {
          if (event.data === YT.PlayerState.ENDED) {
            event.target.playVideo();
          }
        }
      }
    });
  };
</script>

<style>
  .video-background {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100vh;
    overflow: hidden;
    z-index: -2;
    pointer-events: none;
  }

  .video-player {
    position: absolute;
    top: 50%;
    left: 50%;
    width: 100vw;
    height: 100vh;
    transform: translate(-50%, -50%);
    pointer-events: none;
  }

  /* Ensure video covers the entire viewport */
  @media (min-aspect-ratio: 16/9) {
    .video-player {
      width: 100vw;
      height: calc(100vw * 9 / 16);
    }
  }

  @media (max-aspect-ratio: 16/9) {
    .video-player {
      width: calc(100vh * 16 / 9);
      height: 100vh;
    }
  }

  .video-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      135deg,
      rgba(18, 18, 18, 0.92) 0%,
      rgba(24, 24, 27, 0.88) 50%,
      rgba(18, 18, 18, 0.95) 100%
    );
    backdrop-filter: blur(2px);
    z-index: 1;
  }

  /* Grain texture overlay for premium look */
  .video-overlay::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 400 400' xmlns='http://www.w3.org/2000/svg'%3E%3Cfilter id='noiseFilter'%3E%3CfeTurbulence type='fractalNoise' baseFrequency='0.9' numOctaves='3' stitchTiles='stitch'/%3E%3C/filter%3E%3Crect width='100%25' height='100%25' filter='url(%23noiseFilter)' opacity='0.05'/%3E%3C/svg%3E");
    opacity: 0.4;
    pointer-events: none;
  }
</style>
